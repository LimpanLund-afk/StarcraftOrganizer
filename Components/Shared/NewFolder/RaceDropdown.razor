@using StarcraftOrganizer.Data.Entities

<div class="relative inline-block text-left cursor-pointer">

    @if (isOpen)
    {
        <!-- Overlay för att fånga klick utanför -->
        <div class="fixed inset-0 z-0" @onclick="CloseDropdown"></div>
    }
    <button @onclick="ToggleDropdown"
            class="bg-[#1a1f2b] text-white px-4 py-2 rounded-md shadow-md hover:bg-[#2b3144] transition-all min-w-[8rem] text-center flex items-center gap-2 cursor-pointer">
        <img src="@GetRaceIcon(Race)" class="w-5 h-5" alt="@Race icon" />
        <span>@Race</span>
    </button>

    @if (isOpen)
    {
        <ul class="absolute z-10 mt-2 w-full bg-[#1a1f2b] border border-blue-500/30 rounded-md shadow-lg text-white">
            @foreach (Match.ChosenRace value in Enum.GetValues(typeof(Match.ChosenRace)))
            {
                <li class="px-4 py-2 hover:bg-[#2b3144] cursor-pointer flex items-center gap-2"
                    @onclick="() => SelectRace(value)">
                    <img src="@GetRaceIcon(value)" class="w-5 h-5" alt="@value icon" />
                    <span>@value</span>
                </li>
            }
        </ul>
    }
</div>

@code {
    private bool isOpen;

    [Parameter]
    public Match.ChosenRace Race { get; set; }

    [Parameter]
    public EventCallback<Match.ChosenRace> RaceChanged { get; set; }

    private void ToggleDropdown() => isOpen = !isOpen;
    private void CloseDropdown() => isOpen = false;

    private async Task SelectRace(Match.ChosenRace selected)
    {
        Race = selected;
        await RaceChanged.InvokeAsync(selected);
        isOpen = false;
    }

    private string GetRaceIcon(Match.ChosenRace race) => race switch
    {
        Match.ChosenRace.Zerg => "/images/Zerg_Icon.jpg",
        Match.ChosenRace.Protoss => "/images/Protoss_Icon.jpg",
        Match.ChosenRace.Terran => "/images/Terran_Icon.jpg",
        Match.ChosenRace.Random => "/images/Random.png",
        _ => "/icons/unknown.png"
    };
}