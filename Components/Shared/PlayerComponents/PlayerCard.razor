@using StarcraftOrganizer.Data.Entities
@inject MatchService MatchService;


<div class="bg-gradient-to-r from-hsla(205, 88%, 45%, 1) to-hsla(259, 35%, 21%, 1) rounded-lg shadow-md p-4 m-4 min-w-full">
    <div class="flex items-center mb-4">
        <div class="text-xl font-semibold text-white mr-2">@Player.Name</div>
        <div class="text-sm text-gray-400">@Player.Race</div>
    </div>
    <div class="grid grid-cols-3 gap-2 text-sm text-gray-300">
        <div>Vinster</div>
        <div>Förluster</div>
        <div>Vinstprocent</div>
        <div class="text-white">@Wins</div>
        <div class="text-white">@Losses</div>
        <div class="text-white">@WinPercentage%</div>
    </div>
</div>

@code {
    [Parameter]
    public Player? Player { get; set; }

    public int Wins { get; set; }

    public int Losses { get; set; }

    public int WinPercentage { get; set; }

    public List<Match> TotalAmountMatches { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Player != null)
        {
            TotalAmountMatches = await MatchService.GetMatchesByPlayerIdAsync(Player.Id);
        }

        Wins = TotalAmountMatches.Count(m =>
     (m.Player1Id == Player.Id && m.Player1Won) ||
     (m.Player2Id == Player.Id && !m.Player1Won)
     );

        Losses = TotalAmountMatches.Count(m =>
            (m.Player1Id == Player.Id && !m.Player1Won) ||
            (m.Player2Id == Player.Id && m.Player1Won)
        );

        int totalPlayed = Wins + Losses;
        WinPercentage = totalPlayed > 0
            ? (int)Math.Round((double)Wins / totalPlayed * 100)
            : 0;

    }
}
