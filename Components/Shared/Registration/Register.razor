@page "/register"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using StarcraftOrganizer.Components.Shared.NewFolder
@using StarcraftOrganizer.Data.DataContext
@using StarcraftOrganizer.Infra
@using System.ComponentModel.DataAnnotations
@attribute [AllowAnonymous]

@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IDbContextFactory<DataContext> DbContextFactory

    <h3 class="text-2xl font-semibold mb-6 text-center">Registrera dig</h3>
    <div class="mx-auto px-8">
	    <div class="py-4">
            <div class="flex items-center justify-center min-h-screen">
                <div class="w-full max-w-md p-8 bg-opacity-0 rounded shadow-md">
                    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-4">
                            <label class="block text-sm font-medium mb-1">Användarnamn</label>
                            <InputText @bind-Value="registerModel.UserName" class="w-full px-4 py-2 border border-gray-600 bg-transparent text-white rounded focus:outline-none focus:ring-2 focus:ring-blue-500" />
                            <ValidationMessage For="@(() => registerModel.UserName)" />
                        </div>

                        <div class="mb-4">
                            <label class="block text-sm font-medium mb-1">Lösenord</label>
                            <InputText @bind-Value="registerModel.Password" type="password" class="w-full px-4 py-2 border border-gray-600 bg-transparent text-white rounded focus:outline-none focus:ring-2 focus:ring-blue-500" />
                            <ValidationMessage For="@(() => registerModel.Password)" />
                        </div>
                        <div class="mb-4">
                        <label class="block text-sm font-medium mb-1">Bekräfta lösenord</label>
                            <RegisterRaceDropdown Race="registerModel.Race" RaceChanged="HandleRaceChange" />
                        </div>
                        <div class="mb-4"></div>

                        @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="mb-4 text-red-500 font-semibold">@ErrorMessage</div>
                    }

                    <div class="flex flex-col justify-center">
                        <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition w-auto hover:cursor-pointer">
                            Registrera dig
                        </button>
                    </div>
                </EditForm>

                <div class="text-center mt-6">
                    <span class="text-sm text-gray-400">Har du redan ett konto?</span>
                    <a href="/login" class="text-sm text-blue-400 hover:underline ml-1">Logga in här</a>
                </div>
            </div>
        </div>
    </div>

</div>


@code {
    private RegisterModel registerModel = new();
    private string? ErrorMessage;


    private void HandleRaceChange(FavouredRace Race)
    {
        registerModel.Race = Race;
    }

    private async Task HandleRegister()
    {
        ErrorMessage = null;

        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();

            var existingUser = await context.Players.FirstOrDefaultAsync(p => p.UserName == registerModel.UserName);
            if (existingUser != null)
            {
                ErrorMessage = "Användarnamnet är redan upptaget, pucko";
                return;
            }

            var salt = Hash.GenerateSalt();
            var hashedPassword = Hash.GetHash(registerModel.Password + salt, Hash.HashType.SHA256);

            var player = new Player
                {
                    UserName = registerModel.UserName,
                    Password = hashedPassword,
                    Salt = salt,
                    Race  = registerModel.Race
                };

            context.Players.Add(player);
            await context.SaveChangesAsync();

            var loginSuccess = await AuthService.Login(registerModel.UserName, registerModel.Password);
            if (loginSuccess)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Du borde be om ursäkt till alla växter vars syre du slösar";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Ett oväntat fel inträffade, bitch " + ex.Message;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Användarnamn krävs.")]
        [MinLength(3, ErrorMessage = "Användarnamn måste vara minst 3 tecken.")]
        public string UserName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Lösenord krävs.")]
        [MinLength(6, ErrorMessage = "Lösenord måste vara minst 6 tecken.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage ="välj ras")]
        public FavouredRace Race { get; set; }
    }
}
