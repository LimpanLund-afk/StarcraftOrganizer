@using StarcraftOrganizer.Data.Entities


<div class="relative inline-block text-left cursor-pointer">

    @if (isOpen)
    {
        <div class="fixed inset-0 z-0" @onclick="CloseDropdown"></div>
    }

    <button @onclick="ToggleDropdown"
            class="bg-[#1a1f2b] text-white px-4 py-2 rounded-md shadow-md hover:bg-[#2b3144] transition-all min-w-[8rem] text-center flex items-center gap-2 cursor-pointer">
        <img src="@GetRaceIcon(Race)" class="w-5 h-5" alt="@Race icon" />
        <span>@Race</span>
    </button>

    @if (isOpen)
    {
        <ul class="absolute z-10 mt-2 w-full bg-[#1a1f2b] border border-blue-500/30 rounded-md shadow-lg text-white">
            @foreach (FavouredRace value in Enum.GetValues(typeof(FavouredRace)))
            {
                <li class="px-4 py-2 hover:bg-[#2b3144] cursor-pointer flex items-center gap-2"
                    @onclick="() => SelectRace(value)">
                    <img src="@GetRaceIcon(value)" class="w-5 h-5" alt="@value icon" />
                    <span>@value</span>
                </li>
            }
        </ul>
    }
</div>

@code {
    [Parameter]
    public FavouredRace Race { get; set; }

    private bool isOpen = false;

    [Parameter]
    public EventCallback<FavouredRace> RaceChanged { get; set; }

    private void ToggleDropdown() => isOpen = !isOpen;

    private void CloseDropdown() => isOpen = false;

    private async Task SelectRace(FavouredRace race)
    {
        Race = race;
        isOpen = false;
        await RaceChanged.InvokeAsync(race);
    }

    private string GetRaceIcon(FavouredRace race)
    {
        return race switch
        {
            FavouredRace.Zerg => "icons/zerg.png",
            FavouredRace.Protoss => "icons/protoss.png",
            FavouredRace.Terran => "icons/terran.png",
            _ => "icons/unknown.png"
        };
    }
}

