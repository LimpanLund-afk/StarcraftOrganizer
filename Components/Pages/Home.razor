@page "/"
@using StarcraftOrganizer.Components.Features.Challenges
@using StarcraftOrganizer.Data.Entities
@inject PlayerService PlayerService
@inject MapService MapService 
@inject ChallengeService ChallengeService 
@inject ChallengeMapsService ChallengeMapsService

<Page>
    <ChildContent>
        <h1 class="text-3xl font-bold text-center p-4 mb-4">Test Your Might</h1>
        <EditForm Model="newChallengeInput" OnValidSubmit="HandleCreateChallenge">
            <DataAnnotationsValidator />       
            <div class="space-y-6 p-4 max-w-lg mx-auto bg-gray-800/50 rounded-lg shadow">
                <fieldset class="space-y-2">
                    <legend class="text-lg font-semibold mb-2 text-white">Välj Spelare</legend>
                    <div class="flex gap-4">
                        <div class="flex-1">
                            <label for="player1" class="block text-sm font-medium text-gray-300">Spelare 1</label>
                            <InputSelect id="player1" @bind-Value="newChallengeInput.Player1Id" class="mt-1 p-2 block w-full rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                                <option value="">Välj spelare...</option>
                                @if (allPlayers != null)
                                {
                                    @foreach (var player in allPlayers)
                                    {
                                        <option value="@player.Id">@player.Name (@player.Race)</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newChallengeInput.Player1Id)" />
                        </div>
                        <div class="flex-1">
                            <label for="player2" class="block text-sm font-medium text-gray-300">Spelare 2</label>
                            <InputSelect id="player2" @bind-Value="newChallengeInput.Player2Id" class="mt-1 p-2 block w-full rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                                <option value="">Välj spelare...</option>
                                @if (allPlayers != null)
                                {
                                    @foreach (var player in allPlayers.Where(p => p.Id != newChallengeInput.Player1Id))
                                    {
                                        <option value="@player.Id">@player.Name (@player.Race)</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newChallengeInput.Player2Id)" />
                        </div>
                    </div>
                    @if (newChallengeInput.Player1Id != null && newChallengeInput.Player1Id == newChallengeInput.Player2Id)
                    {
                        <p class="text-red-500 text-sm">Spelare 1 och Spelare 2 får inte vara samma person.</p>
                    }
                </fieldset>
                <fieldset class="space-y-2">
                    <legend class="text-lg font-semibold mb-2 text-white">Serieformat</legend>
                    <div>
                        <label for="format" class="block text-sm font-medium text-gray-300">Bäst av:</label>
                        <InputSelect id="format" @bind-Value="newChallengeInput.SeriesFormat" class="mt-1 p-2 block w-full rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                            @foreach (var format in Enum.GetValues<BestOfFormat>())
                            {
                                <option value="@format">@((int)format)</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => newChallengeInput.SeriesFormat)" />
                    </div>
                </fieldset>

                @* == Steg 3: Kartveto == *@
                <fieldset class="space-y-2">
                    <legend class="text-lg font-semibold mb-2 text-white">Kart-veto</legend>
                    <p class="text-sm text-gray-400 mb-2">Varje spelare vetoar en karta från den aktuella kartpoolen.</p>
                    <div class="flex gap-4">
                        <div class="flex-1">
                            <label for="veto1" class="block text-sm font-medium text-gray-300">@(player1Name)'s Veto</label>
                            <InputSelect id="veto1" @bind-Value="newChallengeInput.Player1VetoMapId" class="mt-1 p-2 block w-full rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                                <option value="">Ingen veto...</option>
                                @if (availableMaps != null)
                                {
                                    @foreach (var map in availableMaps)
                                    {
                                        <option value="@map.Id">@map.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newChallengeInput.Player1VetoMapId)" />
                        </div>
                        <div class="flex-1">
                            <label for="veto2" class="block text-sm font-medium text-gray-300">@(player2Name)'s Veto</label>
                            <InputSelect id="veto2" @bind-Value="newChallengeInput.Player2VetoMapId" class="mt-1 p-2 block w-full rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                                <option value="">Ingen veto...</option>
                                @if (availableMaps != null)
                                {
                                    @foreach (var map in availableMaps.Where(m => m.Id != newChallengeInput.Player1VetoMapId))
                                    {
                                        <option value="@map.Id">@map.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newChallengeInput.Player2VetoMapId)" />
                        </div>
                    </div>
                    @if (newChallengeInput.Player1VetoMapId.HasValue && newChallengeInput.Player1VetoMapId == newChallengeInput.Player2VetoMapId)
                    {
                        <p class="text-red-500 text-sm">Spelarna kan inte vetoa samma karta.</p>
                    }
                    @if (!HasEnoughMaps())
                    {
                        <p class="text-red-500 text-sm">För få kartor kvar i poolen efter veto för att spela Bäst av @((int)newChallengeInput.SeriesFormat)!</p>
                    }
                </fieldset>
                @if (IsFormValid())
                {
                    <div class="mt-4 flex justify-center">
                        <button type="button" 
                        class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition w-auto"
                        @onclick="GenerateRandomMaps">
                            Generera Slumpmässiga Kartor
                        </button>                     
                    </div>
                    @if (showMapComponent)
                    {
                        <MapOrderEditor MaxSelectable="(int)newChallengeInput.SeriesFormat" AvailableMaps="GetFilteredMaps()" SelectedMapsChanged="UpdateChallengMaps" />
                    }
                }
                <div>
                    <button type="submit"
                    disabled="@(!IsFormValid())"
                    class="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed">
                        Skapa Utmaning
                    </button>
                </div>
            </div>
        </EditForm>

    </ChildContent>

</Page>



@code {

    // Klass för att binda formulärdata
    private class ChallengeInputModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Spelare 1 måste väljas.")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue, ErrorMessage = "Spelare 1 måste väljas.")]
        public string Player1Id { get; set; }

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Spelare 2 måste väljas.")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue, ErrorMessage = "Spelare 2 måste väljas.")]
        public string Player2Id { get; set; }

        public BestOfFormat SeriesFormat { get; set; } = BestOfFormat.BestOf3; 

        public int? Player1VetoMapId { get; set; }
        public int? Player2VetoMapId { get; set; }
    }

    private ChallengeInputModel newChallengeInput = new();
    private List<Player>? allPlayers;
    private List<Map>? availableMaps;
    private List<Map>? selectedMaps = new();
    private bool showMapComponent { get; set; } = false;

    // Hämta namn för att visa i labels (bör uppdateras när spelare väljs)
    private string player1Name => allPlayers?.FirstOrDefault(p => p.Id == newChallengeInput.Player1Id)?.Name ?? "Spelare 1";
    private string player2Name => allPlayers?.FirstOrDefault(p => p.Id == newChallengeInput.Player2Id)?.Name ?? "Spelare 2";


    protected override async Task OnInitializedAsync()
    {
        allPlayers = await PlayerService.GetAllPlayersAsync();
        availableMaps = await MapService.GetAllMapssAsync();


    }

    private async Task HandleCreateChallenge()
    {
        if (!IsFormValid()) return; 


        var challenge = new Challenge
        {
            Player1Id = newChallengeInput.Player1Id,
            Player2Id = newChallengeInput.Player2Id,
            SeriesFormat = newChallengeInput.SeriesFormat,
            Player1VetoMapId = newChallengeInput.Player1VetoMapId,
            Player2VetoMapId = newChallengeInput.Player2VetoMapId,
            Status = ChallengeStatus.ReadyToPlay,
            CreationDate = DateTime.UtcNow
        };


        try
        {

            await ChallengeService.AddAsync(challenge);

            var challengeMaps = selectedMaps.Select(map => new ChallengeMaps
                {
                    ChallengeId = challenge.Id,
                    MapId = map.Id
                }).ToList();

            await ChallengeMapsService.AddAsync(challengeMaps);
            // TODO: Navigera till en sida som visar utmaningen
            newChallengeInput = new(); 
            showMapComponent = false;
            StateHasChanged(); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating challenge: {ex.Message}");

        }
    }
    private bool HasEnoughMaps()
    {
        int requiredGames = newChallengeInput.SeriesFormat switch
        {
            BestOfFormat.BestOf1 => 1,
            BestOfFormat.BestOf3 => 2, 
            BestOfFormat.BestOf5 => 3, 
            BestOfFormat.BestOf7 => 4,
            _ => 1
        };
        int mapsInPool = availableMaps?.Count ?? 0;
        int vetoes = 0;
        if (newChallengeInput.Player1VetoMapId.HasValue) vetoes++;
        if (newChallengeInput.Player2VetoMapId.HasValue && newChallengeInput.Player1VetoMapId != newChallengeInput.Player2VetoMapId) vetoes++; 
        int maxGamesInSeries = (int)newChallengeInput.SeriesFormat;

        return (mapsInPool - vetoes) >= maxGamesInSeries;
    }

    private bool IsFormValid()
    {

        if (newChallengeInput.Player1Id == null || newChallengeInput.Player2Id == null) return false;
        if (newChallengeInput.Player1Id == newChallengeInput.Player2Id) return false;
        if (newChallengeInput.Player1VetoMapId.HasValue && newChallengeInput.Player1VetoMapId == newChallengeInput.Player2VetoMapId) return false;
        if (!HasEnoughMaps()) return false;

        return true; 
    }



    private void GenerateRandomMaps()
    {
        var mapsInPool = availableMaps!
            .Where(m => m.Id != newChallengeInput.Player1VetoMapId && m.Id != newChallengeInput.Player2VetoMapId)
            .OrderBy(_ => Guid.NewGuid())
            .Take((int)newChallengeInput.SeriesFormat)
            .ToList();
        showMapComponent = true;
    }

    private List<Map> GetFilteredMaps()
    {
        return availableMaps?
            .Where(m => m.Id != newChallengeInput.Player1VetoMapId && m.Id != newChallengeInput.Player2VetoMapId)
            .ToList() ?? new List<Map>();
    }
    private void UpdateChallengMaps(List<Map> mapsToPlay)
    {
        selectedMaps = mapsToPlay;
    }
}
