@using Microsoft.AspNetCore.Components
@using StarcraftOrganizer.Data.Entities

<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
    @foreach (var map in AvailableMaps)
    {
        var isSelected = SelectedMaps.Any(m => m.Id == map.Id);
        <div class="relative border rounded shadow p-2 bg-black cursor-pointer transition duration-200
                    @(isSelected ? "border-4 border-green-500" : "hover:border-gray-400")"
             @onclick="@(() => ToggleMapSelection(map))">
            @if (isSelected)
            {
                <div class="absolute top-1 right-1 rounded-full p-1 shadow">
                    <!-- Bock-ikon (Heroicons / solid check) -->
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7" />
                    </svg>
                </div>
            }
            <div>
                <img src="@map.ImageUrl" alt="@map.Name" class="w-full aspect-video object-cover rounded mb-2 shadow" />
            </div>
            <div>
                <p class="text-center font-semibold">@map.Name</p>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] 
    public int MaxSelectable { get; set; }

    [Parameter] 
    public List<Map> AvailableMaps { get; set; } = new();


    public List<Map> SelectedMaps { get; set; } = new();

    [Parameter] 
    public EventCallback<List<Map>> SelectedMapsChanged { get; set; }

  
    private void ToggleMapSelection(Map map)
    {
        if (SelectedMaps.Any() && SelectedMaps.Contains(map))
        {
            SelectedMaps.Remove(map);
        }
        else if (SelectedMaps.Count < MaxSelectable)
        {
            SelectedMaps.Add(map);
        }

        SelectedMapsChanged.InvokeAsync(SelectedMaps);
    }
}

