services:

  postgres:
    image: postgres:15
    container_name: starcraft_postgres
    env_file:
      - .env
    ports:
      - "5432:5432"  
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready "]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    env_file:
      - .env
    ports:
      - "5050:80"
    environment:
     - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
     - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    networks:
      - app-network

  starcraft-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: starcraft_app
    env_file:
      - .env
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - DATABASE_CONNECTION_STRING=${DB_CONNECTION_STRING} 
    ports:
     - 3000:8080
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    command: dotnet watch run --urls=http://+:8080 --no-launch-profile
    develop:
      watch:
        - action: sync
          path: .
          target: /src
          ignore:
            - bin/
            - obj/
            - .git/
            - node_modules/
        - action: rebuild
          path: StarcraftOrganizer.csproj

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge